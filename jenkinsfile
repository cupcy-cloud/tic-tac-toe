pipeline {
    agent any
    tools {
        nodejs "node"
    }
    environment {
        SONAR_SCANNER_HOME = tool 'sonarqube-scanner'
        PATH = "${SONAR_SCANNER_HOME}/bin:${env.PATH}"
        REPOSITORY_URI = "620336895710.dkr.ecr.us-east-1.amazonaws.com"
        AWS_DEFAULT_REGION = "us-east-1"
    }
    stages {
        stage('Checkout from git') {
            steps {
                git url: 'https://github.com/cupcy-cloud/tic-tac-toe.git', branch: 'main',
                 credentialsId: 'git-credentials'
            }
        }
        stage('Build code') {
            steps {
                sh 'npm install'
               
            }
        }
        stage('SonarQube static analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh 'sonar-scanner -Dsonar.projectKey=tic-tac-toe-game'
                }
            }
        }
        stage('Sonar Quality Gate') {
            steps {
                script {
                    echo 'Quality Gate'
                    timeout(time: 5, unit: 'MINUTES') {
                        def qualityGate = waitForQualityGate()
                        if (qualityGate.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qualityGate.status}"
                        }
                    }            
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    commitID = sh(returnStdout: true, script: "git rev-parse --short=10 HEAD").trim();
                    sh "docker build -t ${env.REPOSITORY_URI}/tic-tac-toe:${commitID} ."
                }
            }
        }
        stage('Push docker Image') {
            steps {
                script {
                    sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${env.REPOSITORY_URI}"
                    sh "docker push ${env.REPOSITORY_URI}/tic-tac-toe:${commitID}"
                }
            }
        }
        stage('Commit & Push Manifest') {
            steps {
                script {
                    commitID = sh(returnStdout: true, script: "git rev-parse --short=10 HEAD").trim();
                    // Checkout code from git
                    git branch: 'main', credentialsId: 'git-credentials', url: 'https://github.com/cupcy-cloud/kubernetes-manifest.git'
                    sh "git config user.name '********************'"
                    sh "git config user.email '********************'"
                    sh("sed -i 's+image: .*+image: ${REPOSITORY_URI}/tic-tac-toe:${commitID}+g' k8s-manifest/deployment.yml")
                    
                    withCredentials([gitUsernamePassword(credentialsId: 'git-credentials', gitToolName: 'Default')]) {
                        sh 'git fetch origin'
                        sh 'git add -u'
                        sh "git commit -m 'Update deployment image to ${commitID}'"
                        sh 'git push origin main'
                    }
                }
            }
        }
    }
}
